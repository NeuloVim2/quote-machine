{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quotesArr","author","text","colorsList","Quote","props","isQuoteVisible","className","QuoteText","color","QuoteAuthor","id","style","icon","faQuoteLeft","Link","href","backgroundColor","borderColor","faTwitter","Button","onClick","handleClick","QuoteMachine","state","bind","max","length","randomNum","Math","floor","random","this","setState","setTimeout","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.774880f0.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst quotesArr = [\n  { author: \"Mahatma Gandhi\", \n    text: \"Live as if you were to die tomorrow. Learn as if you were to live forever.\"\n  },\n  { author: \"Friedrich Nietzsche\", \n    text: \"That which does not kill us makes us stronger.\"\n  },\n  { author: \"Bernard M. Baruch\", \n    text: \"Be who you are and say what you feel, because those who mind don’t matter and those who matter don’t mind.\"\n  },\n  { author: \"Virginia Satir\", \n    text: \"We must not allow other people’s limited perceptions to define us.\"\n  },\n  { author: \"Theodore Roosevelt\", \n    text: \"Do what you can, with what you have, where you are.\"\n  },\n  { author: \"Oscar Wilde\", \n    text: \"Be yourself; everyone else is already taken.”\"\n  },\n  { author: \"William Shakespeare\", \n    text: \"This above all: to thine own self be true.\"\n  },\n  { author: \"Napoleon Hill\", \n    text: \"If you cannot do great things, do small things in a great way.\"\n  },\n  { author: \"Milton Berle\", \n    text: \"If opportunity doesn’t knock, build a door.\"\n  }\n]\n\nconst colorsList = [\n  \"#de4463\",\n  \"#ac4b1c\",\n  \"#625261\",\n  \"#8675a9\",\n  \"#212121\",\n  \"#d7385e\",\n  \"#790c5a\"\n]\n\nclass QuoteMachine extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      text: quotesArr[0].text,\n      author: quotesArr[0].author,\n      isQuoteVisible: true,\n      color: \"\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(){\n    let min = 0;\n    let max = quotesArr.length;\n    let randomNum = Math.floor(Math.random() * (max - min)) + min;\n    this.setState( ( state ) => {\n      return {\n        isQuoteVisible: !state.isQuoteVisible\n      }\n    }, () => {\n      setTimeout(() => !this.state.isQuoteVisible \n        ? this.setState({isQuoteVisible: true,\n          text: quotesArr[randomNum].text,\n          author: quotesArr[randomNum].author,\n          color: colorsList[randomNum]  \n        }) \n        : false, 500)\n    })\n  }\n  render(){\n    return (\n      <section \n        className=\"d-flex flex-column justify-content-center vh-100\"\n        style={ { backgroundColor: this.state.color } }\n        >\n        <div className=\"shadow-sm p-5 rounded-sm\" id=\"quote-box\">\n        \n          <Quote \n            text={this.state.text} \n            author={this.state.author}\n            color={this.state.color} \n            isQuoteVisible={this.state.isQuoteVisible}\n          />\n          <div className=\"footer mt-4 d-flex justify-content-between\">\n            <Link color={this.state.color} />\n            <Button handleClick={this.handleClick} color={this.state.color} />\n          </div>\n        </div> \n      </section>\n    )\n  }\n}\n\nfunction Quote (props){\n    const { isQuoteVisible } = props;\n    return (\n      <div className={`content ${isQuoteVisible ? \"\" : \"quote-animate\"}`} > \n        <QuoteText text={props.text} color={props.color}/>\n        <QuoteAuthor author={props.author} color={props.color} />\n      </div>\n    )\n}\nfunction QuoteText(props){\n    return (\n        <p className=\"text-center\" id=\"text\"  style={ {color: props.color} }>\n          <FontAwesomeIcon icon={faQuoteLeft} style={ {color: props.color} } className=\"quote-icon mr-2\"/>{props.text}\n        </p>\n      )\n}\nfunction QuoteAuthor(props){\n  return (\n    <h4 className='text-right font-weight-light small' id='author' style={ {color: props.color} }>- {props.author}</h4>\n  )\n}\nfunction Link (props){  \n    return (\n      <a className=\"btn btn-primary\" id='tweet-quote' href='twitter.com/intent/tweet' style={ { backgroundColor: props.color, borderColor: props.color} }><FontAwesomeIcon icon={faTwitter}/></a>\n    )\n}\nfunction Button (props){\n    return (\n      <button \n        className=\"btn btn-primary ml-4\" \n        style={ { backgroundColor: props.color, borderColor: props.color}} \n        onClick={props.handleClick}\n        id='new-quote'\n      >New Quote</button>\n    )\n}\nexport default QuoteMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteMachine from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuoteMachine />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}